import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

/**
 * Frame representing the exploration of different areas in the Budget Pokemon Game.
 * Allows the user to navigate through areas, encounter creatures, and trigger battles.
 * 
 * Model-View-Controller (MVC) pattern: VIEW
 * 
 * @author Shinoruba
 * @author JSTP8330
 * @version 1.5
 */

public class ExploreAreaFrame extends javax.swing.JFrame {
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Area1;
    private javax.swing.JPanel Area2;
    private javax.swing.JPanel Area3;
    private javax.swing.JLabel AreaLabel;
    private javax.swing.JButton MoveDown;
    private javax.swing.JButton MoveLeft;
    private javax.swing.JButton MoveRight;
    private javax.swing.JButton MoveUp;
    private javax.swing.JPanel MovementPanel;
    private javax.swing.JTabbedPane TabbedAreas;
    private javax.swing.JLabel activeCreatureLabel;
    private javax.swing.JLabel creatureImage;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextArea playerStats;
    private javax.swing.JScrollPane textBoxScrollPane;
    // End of variables declaration//GEN-END:variables

    private Area currentArea;
    private Area areaInPlace;
    private Creature userCreature, encounteredEnemy;
    private Inventory currentInventory;
    private Random random;
    
    /**
     * Creates new form ExploreAreaFrame
     */
    public ExploreAreaFrame(Creature userCreature, Inventory currentInventory) {
        initComponents();
        // Set up the variables
        this.currentInventory = currentInventory;
        this.currentArea = new Area(0,0);
        this.areaInPlace = new Area(1,5);
        this.areaInPlace.setCurrentX(1);
        this.areaInPlace.setCurrentY(5);
        this.userCreature = currentInventory.getActiveCreature();
        this.encounteredEnemy = null;
        this.random = new Random();
        // Refresh needed infos
        activeCreatureLabel.setText(userCreature.getName());
        populateCreatureInfo(userCreature, playerStats);
        refreshActiveCreatureImage(currentInventory);
        // Set up the GUIs
        setTitle("Area Exploration");
        setSize(600, 500);
        TabbedAreas.setSelectedIndex(0);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AreaLabel = new javax.swing.JLabel();
        MovementPanel = new javax.swing.JPanel();
        MoveUp = new javax.swing.JButton();
        MoveRight = new javax.swing.JButton();
        MoveDown = new javax.swing.JButton();
        MoveLeft = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        TabbedAreas = new javax.swing.JTabbedPane();
        Area1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Area2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Area3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        activeCreatureLabel = new javax.swing.JLabel();
        creatureImage = new javax.swing.JLabel();
        textBoxScrollPane = new javax.swing.JScrollPane();
        playerStats = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AreaLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        AreaLabel.setText("Select Your Area");

        MoveUp.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MoveUp.setText("^");
        MoveUp.setPreferredSize(new java.awt.Dimension(35, 35));
        MoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveUpActionPerformed(evt);
            }
        });

        MoveRight.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MoveRight.setText(">");
        MoveRight.setPreferredSize(new java.awt.Dimension(35, 35));
        MoveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveRightActionPerformed(evt);
            }
        });

        MoveDown.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MoveDown.setText("I");
        MoveDown.setPreferredSize(new java.awt.Dimension(35, 35));
        MoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveDownActionPerformed(evt);
            }
        });

        MoveLeft.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MoveLeft.setText("<");
        MoveLeft.setPreferredSize(new java.awt.Dimension(35, 35));
        MoveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveLeftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MovementPanelLayout = new javax.swing.GroupLayout(MovementPanel);
        MovementPanel.setLayout(MovementPanelLayout);
        MovementPanelLayout.setHorizontalGroup(
            MovementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MovementPanelLayout.createSequentialGroup()
                .addGroup(MovementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MovementPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(MoveLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MoveRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MovementPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(MovementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MoveDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        MovementPanelLayout.setVerticalGroup(
            MovementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MovementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MovementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MoveRight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MoveLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MoveDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitButton.setText("Exit to Menu");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        TabbedAreas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedAreasStateChanged(evt);
            }
        });

        Area1.setLayout(new java.awt.GridLayout(5, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("0,0");
        Area1.add(jLabel1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("0,1");
        Area1.add(jLabel2);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("0,2");
        Area1.add(jLabel3);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("0,3");
        Area1.add(jLabel4);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("0,4");
        Area1.add(jLabel5);

        TabbedAreas.addTab("Area 1", Area1);

        Area2.setLayout(new java.awt.GridLayout(3, 3));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("0,0");
        Area2.add(jLabel6);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("1,0");
        Area2.add(jLabel7);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("2,0");
        Area2.add(jLabel12);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("0,1");
        Area2.add(jLabel8);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("1,1");
        Area2.add(jLabel9);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("2,1");
        Area2.add(jLabel13);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("0,2");
        Area2.add(jLabel10);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("1,2");
        Area2.add(jLabel11);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("2,2");
        Area2.add(jLabel14);

        TabbedAreas.addTab("Area 2", Area2);

        Area3.setLayout(new java.awt.GridLayout(4, 4));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("0,0");
        Area3.add(jLabel15);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("1,0");
        Area3.add(jLabel16);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("2,0");
        Area3.add(jLabel17);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("3,0");
        Area3.add(jLabel18);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("0,1");
        Area3.add(jLabel19);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("1,1");
        Area3.add(jLabel20);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("2,1");
        Area3.add(jLabel21);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("3,1");
        Area3.add(jLabel22);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("0,2");
        Area3.add(jLabel23);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("1,2");
        Area3.add(jLabel24);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("2,2");
        Area3.add(jLabel25);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("3,2");
        Area3.add(jLabel26);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("0,3");
        Area3.add(jLabel27);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("1,3");
        Area3.add(jLabel28);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("2,3");
        Area3.add(jLabel29);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("3,3");
        Area3.add(jLabel30);

        TabbedAreas.addTab("Area 3", Area3);

        activeCreatureLabel.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        activeCreatureLabel.setText("Active Creature");

        textBoxScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        textBoxScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        playerStats.setColumns(20);
        playerStats.setRows(5);
        textBoxScrollPane.setViewportView(playerStats);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AreaLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TabbedAreas, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(MovementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addGap(74, 74, 74))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(activeCreatureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(creatureImage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textBoxScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGap(12, 12, 12))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(AreaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TabbedAreas))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(activeCreatureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creatureImage, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(textBoxScrollPane))
                        .addGap(25, 25, 25)
                        .addComponent(MovementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(exitButton)))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private JPanel getCurrentAreaPanel() {
        int selectedTabIndex = TabbedAreas.getSelectedIndex();

        switch (selectedTabIndex) {
            case 0:
                return Area1;
            case 1:
                return Area2;
            case 2:
                return Area3;
            default:
                return null; // or throw an exception for an invalid index
        }
    }
    private void updatePlayerIcon(JPanel area, int numRows, int numCols, int playerRow, int playerCol) {
        // Clear icons from all labels in the given area
        for (Component component : area.getComponents()) {
            if (component instanceof JLabel) {
                JLabel label = (JLabel) component;
                label.setIcon(null);
            }
        }

        // Iterate over the labels in the area
        for (Component component : area.getComponents()) {
            if (component instanceof JLabel) {
                JLabel label = (JLabel) component;
                String labelText = label.getText();

                // Check if the label coordinates match the player's position
                if (labelText.equals(playerRow + "," + playerCol)) {
                    // Load the player icon and set it to the label
                    ImageIcon playerIcon = createImageIcon("/icons/player.png");
                    Image scaledImage = playerIcon.getImage().getScaledInstance(
                            label.getWidth(),
                            label.getHeight(),
                            Image.SCALE_SMOOTH
                    );
                    label.setIcon(new ImageIcon(scaledImage));
                } else {
                    // Clear the icon if the label doesn't match the player's position
                    label.setIcon(null);
                }
            }
        }
    }

    private void populateCreatureInfo(Creature creature, JTextArea textArea) {
        // Check if the creature is not null
        if (creature != null) {
            // Get information using getters
            String name = creature.getName();
            String type = creature.getType();
            String family = creature.getFamily();
            int evolutionLevel = creature.getEvolutionLevel();
            int health = creature.getHealth();

            // Populate the text area with creature information
            textArea.setText(
                    "Name: " + name +
                            "\nType: " + type +
                            "\nFamily: " + family +
                            "\nEvolution Level: " + evolutionLevel +
                            "\nHealth: " + health
            );
        } else {
            // If no creature is selected, display a message in the text area
            textArea.setText("No creature selected!");
        }
    }

    private void refreshActiveCreatureImage(Inventory inventory) {
        Creature activeCreature = inventory.getActiveCreature();

        // Check if an active creature exists
        if (activeCreature != null) {
            // Get the creature name and create the corresponding icon file name
            String creatureName = activeCreature.getName();

            // Load the icon using ClassLoader
            ImageIcon icon = createImageIcon("/icons/" + creatureName.toLowerCase() + ".png");

            // Set the loaded icon to the JLabel
            creatureImage.setIcon(icon);
        } else {
            // If no active creature, set the JLabel to null or a default image
            creatureImage.setIcon(null);
        }
    }

    private ImageIcon createImageIcon(String path) {
        // Use ClassLoader to load the icon from the classpath
        java.net.URL imgUrl = getClass().getResource(path);

        // Check if the resource was found
        if (imgUrl != null) {
            return new ImageIcon(imgUrl);
        } else {
            // If the resource was not found, you can provide a default icon or handle the situation accordingly
            System.err.println("Resource not found: " + path);
            return null;
        }
    }

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void TabbedAreasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedAreasStateChanged
        JTabbedPane sourceTabbedPane = (JTabbedPane) evt.getSource();
        int selectedIndex = sourceTabbedPane.getSelectedIndex();

        switch (selectedIndex) {
            case 0:
                System.out.println("Switched to Area 1");
                areaInPlace = new Area(5, 1);
                areaInPlace.setCurrentX(1);
                areaInPlace.setCurrentY(5);
                break;
            case 1:
                System.out.println("Switched to Area 2");
                areaInPlace = new Area(3, 3);
                areaInPlace.setCurrentX(3);
                areaInPlace.setCurrentY(3);
                break;
            // Add more cases for additional tabs if needed
            case 2:
                System.out.println("Switched to Area 3");
                areaInPlace = new Area(4, 4);
                areaInPlace.setCurrentX(4);
                areaInPlace.setCurrentY(4);
                break;
            default:
                System.out.println("Invalid Tab");
                break;
        }

    }//GEN-LAST:event_TabbedAreasStateChanged

    private void MoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveUpActionPerformed
        int currentX = currentArea.getCurrentX();
        int currentY = currentArea.getCurrentY();

        if (currentY > 0) {
            currentArea.setCurrentX(currentX);
            currentArea.setCurrentY(currentY - 1);

            // Detect the specific area you're in
            int selectedTabIndex = TabbedAreas.getSelectedIndex();
            System.out.println("Moved UP in Area " + (selectedTabIndex + 1));
            System.out.println("Current X and Y: " + currentArea.getCurrentX() + "," + currentArea.getCurrentY());

            // Get the current JPanel
            JPanel currentAreaPanel = getCurrentAreaPanel();

            // Check if the currentAreaPanel is not null before calling updatePlayerIcon
            if (currentAreaPanel != null) {
                updatePlayerIcon(currentAreaPanel, areaInPlace.getCurrentX(), areaInPlace.getCurrentY(), currentArea.getCurrentX(), currentArea.getCurrentY());
            }

            // Gives a player a chance to encounter a creature
            if(currentArea.shouldEncounterCreature()){
                encounteredEnemy = currentArea.encounteredCreature();
                encounteredEnemy.getHealth();
                JOptionPane.showMessageDialog(this, "You've encountered a creature!");
                BattlePhase battle = new BattlePhase(userCreature, encounteredEnemy, currentInventory);
                BattleScreenFrame battleScreenFrame = new BattleScreenFrame(battle);
                JOptionPane.showMessageDialog(this, "The BattleScreenFrame is broken atm. Please use" +
                        "the terminal instead, thank you!");
            } else {
                JOptionPane.showMessageDialog(this, "You explore the area but find no creatures.");
            }

        } else {
            System.out.println("You cannot move UP from here.");
            JOptionPane.showMessageDialog(this, "Invalid Move!");
        }
    }//GEN-LAST:event_MoveUpActionPerformed

    private void MoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveDownActionPerformed
        int currentX = currentArea.getCurrentX();
        int currentY = currentArea.getCurrentY();

        if (currentY < areaInPlace.getCurrentY() - 1) {
            currentArea.setCurrentX(currentX);
            currentArea.setCurrentY(currentY + 1);

            // Detect the specific area you're in
            int selectedTabIndex = TabbedAreas.getSelectedIndex();
            System.out.println("Moved DOWN in Area " + (selectedTabIndex + 1));
            System.out.println("Current X and Y: " + currentArea.getCurrentX() + "," + currentArea.getCurrentY());

            // Get the current JPanel
            JPanel currentAreaPanel = getCurrentAreaPanel();

            // Check if the currentAreaPanel is not null before calling updatePlayerIcon
            if (currentAreaPanel != null) {
                updatePlayerIcon(currentAreaPanel, areaInPlace.getCurrentX(), areaInPlace.getCurrentY(), currentArea.getCurrentX(), currentArea.getCurrentY());
            }

            // Gives a player a chance to encounter a creature
            if(currentArea.shouldEncounterCreature()){
                encounteredEnemy = currentArea.encounteredCreature();
                encounteredEnemy.getHealth();
                JOptionPane.showMessageDialog(this, "You've encountered a creature!");
                BattlePhase battle = new BattlePhase(userCreature, encounteredEnemy, currentInventory);
                BattleScreenFrame battleScreenFrame = new BattleScreenFrame(battle);
                JOptionPane.showMessageDialog(this, "The BattleScreenFrame is broken atm. Please use" +
                        "the terminal instead, thank you!");
            } else {
                JOptionPane.showMessageDialog(this, "You explore the area but find no creatures.");
            }

        } else {
            System.out.println("You cannot move DOWN from here.");
            JOptionPane.showMessageDialog(this, "Invalid Move!");
        }
    }//GEN-LAST:event_MoveDownActionPerformed

    private void MoveLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveLeftActionPerformed
        int currentX = currentArea.getCurrentX();
        int currentY = currentArea.getCurrentY();

        if (currentX > 0) {
            currentArea.setCurrentX(currentX - 1);
            currentArea.setCurrentY(currentY);

            // Detect the specific area you're in
            int selectedTabIndex = TabbedAreas.getSelectedIndex();
            System.out.println("Moved LEFT in Area " + (selectedTabIndex + 1));
            System.out.println("Current X and Y: " + currentArea.getCurrentX() + "," + currentArea.getCurrentY());

            // Get the current JPanel
            JPanel currentAreaPanel = getCurrentAreaPanel();

            // Check if the currentAreaPanel is not null before calling updatePlayerIcon
            if (currentAreaPanel != null) {
                updatePlayerIcon(currentAreaPanel, areaInPlace.getCurrentX(), areaInPlace.getCurrentY(), currentArea.getCurrentX(), currentArea.getCurrentY());
            }

            // Gives a player a chance to encounter a creature
            if(currentArea.shouldEncounterCreature()){
                encounteredEnemy = currentArea.encounteredCreature();
                encounteredEnemy.getHealth();
                JOptionPane.showMessageDialog(this, "You've encountered a creature!");
                BattlePhase battle = new BattlePhase(userCreature, encounteredEnemy, currentInventory);
                BattleScreenFrame battleScreenFrame = new BattleScreenFrame(battle);
                JOptionPane.showMessageDialog(this, "The BattleScreenFrame is broken atm. Please use" +
                        "the terminal instead, thank you!");
            } else {
                JOptionPane.showMessageDialog(this, "You explore the area but find no creatures.");
            }

        } else {
            System.out.println("You cannot move LEFT from here.");
            JOptionPane.showMessageDialog(this, "Invalid Move!");
        }
    }//GEN-LAST:event_MoveLeftActionPerformed

    private void MoveRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveRightActionPerformed
        int currentX = currentArea.getCurrentX();
        int currentY = currentArea.getCurrentY();

        if (currentX < areaInPlace.getCurrentX() - 1) {
            currentArea.setCurrentX(currentX + 1);
            currentArea.setCurrentY(currentY);

            // Detect the specific area you're in
            int selectedTabIndex = TabbedAreas.getSelectedIndex();
            System.out.println("Moved RIGHT in Area " + (selectedTabIndex + 1));
            System.out.println("Current X and Y: " + currentArea.getCurrentX() + "," + currentArea.getCurrentY());

            // Get the current JPanel
            JPanel currentAreaPanel = getCurrentAreaPanel();

            // Check if the currentAreaPanel is not null before calling updatePlayerIcon
            if (currentAreaPanel != null) {
                updatePlayerIcon(currentAreaPanel, areaInPlace.getCurrentX(), areaInPlace.getCurrentY(), currentArea.getCurrentX(), currentArea.getCurrentY());
            }

            // Gives a player a chance to encounter a creature
            if(currentArea.shouldEncounterCreature()){
                encounteredEnemy = currentArea.encounteredCreature();
                encounteredEnemy.getHealth();
                JOptionPane.showMessageDialog(this, "You've encountered a creature!");
                BattlePhase battle = new BattlePhase(userCreature, encounteredEnemy, currentInventory);
                BattleScreenFrame battleScreenFrame = new BattleScreenFrame(battle);
                JOptionPane.showMessageDialog(this, "The BattleScreenFrame is broken atm. Please use" +
                        "the terminal instead, thank you!");
            } else {
                JOptionPane.showMessageDialog(this, "You explore the area but find no creatures.");
            }

        } else {
            System.out.println("You cannot move RIGHT from here.");
            JOptionPane.showMessageDialog(this, "Invalid Move!");
        }
    }//GEN-LAST:event_MoveRightActionPerformed


}
