import javax.swing.*;
import java.awt.*;

/**
 * Panel representing the inventory of creatures in the Budget Pokemon Game.
 * It displays information about each creature in the inventory and allows
 * the user to view and change the active creature.
 * 
 * Model-View-Controller (MVC) pattern: VIEW
 * 
 * @author Shinoruba
 * @author JSTP8330
 * @version 1.1
 */

public class InventoryPanel extends javax.swing.JFrame {

    private GameGUI activeGameGUI;
    private Inventory activeInventory;
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeCreatureImage;
    private javax.swing.JButton changeActiveCreature;
    private javax.swing.JComboBox<String> changeActiveCreatureBox;
    private javax.swing.JTextArea creatureTextBox;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel inventoryLabel;
    private javax.swing.JScrollPane textBoxScrollPane;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Creates new form InventoryPanel
     */
    public InventoryPanel(Inventory inventory, GameGUI gameGUI) {
        initComponents();
        activeGameGUI = gameGUI;
        activeInventory = inventory;
        setTitle("Inventory Panel");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        populateActiveCreatureBox(inventory);
        setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        changeActiveCreatureBox = new javax.swing.JComboBox<>();
        exitButton = new javax.swing.JButton();
        activeCreatureImage = new javax.swing.JLabel();
        changeActiveCreature = new javax.swing.JButton();
        inventoryLabel = new javax.swing.JLabel();
        textBoxScrollPane = new javax.swing.JScrollPane();
        creatureTextBox = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        changeActiveCreatureBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        changeActiveCreatureBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActiveCreatureBoxActionPerformed(evt);
            }
        });

        exitButton.setText("Exit to Main Menu");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        changeActiveCreature.setText("Change Active Creature");
        changeActiveCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActiveCreatureActionPerformed(evt);
            }
        });

        inventoryLabel.setText("Active Creature");

        creatureTextBox.setColumns(20);
        creatureTextBox.setRows(5);
        textBoxScrollPane.setViewportView(creatureTextBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeCreatureImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inventoryLabel)
                        .addGap(73, 73, 73)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changeActiveCreatureBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(changeActiveCreature, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textBoxScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inventoryLabel)
                        .addGap(13, 13, 13)
                        .addComponent(activeCreatureImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textBoxScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(changeActiveCreatureBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(changeActiveCreature)
                        .addGap(11, 11, 11)
                        .addComponent(exitButton)))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Creature getCreatureByName(Inventory inventory, String creatureName) {
    for (Creature creature : inventory.getAllCreatures()) {
        if (creature.getName().equals(creatureName)) {
            return creature;
        }
    }
    // Return null or handle the case when the creature is not found
    return null;
    }
    
    /**
     * This method refreshes the active creatures' image used, as soon as the
     * change active creature button is pressed.
     * 
     * @param inventory The inventory containing the user's creatures.
     * 
     */
    
    private void refreshActiveCreatureImage(Inventory inventory) {
        Creature activeCreature = inventory.getActiveCreature();
        
        // Check if an active creature exists
        if (activeCreature != null) {
            // Get the creature name and create the corresponding icon file name
            String creatureName = activeCreature.getName();
            // Load the icon and set it to the JLabel
            ImageIcon icon = new ImageIcon(getClass().getResource("/icons/" + creatureName.toLowerCase() + ".png"));
            activeCreatureImage.setIcon(icon);
        } else {
            // If no active creature, set the JLabel to null or a default image
            activeCreatureImage.setIcon(null);
        }
    }



 
    /**
     * This method populates the text box with the active creature.
     * 
     * @param inventory The inventory containing the user's creatures.
     */
    
    private void populateCreatureTextBox (Inventory inventory){
    
    Creature activeCreature = inventory.getActiveCreature();

    // Check if an active creature exists
    if (activeCreature != null) {
        // Get information using getters
        String name = activeCreature.getName();
        String type = activeCreature.getType();
        String family = activeCreature.getFamily();
        int evolutionLevel = activeCreature.getEvolutionLevel();
        int health = activeCreature.getHealth();

        // Populate the text box with creature information
        creatureTextBox.setText(
                "Name: " + name +
                "\nType: " + type +
                "\nFamily: " + family +
                "\nEvolution Level: " + evolutionLevel +
                "\nHealth: " + health
        );
    } else {
        // If no active creature, display a message in the text box
        creatureTextBox.setText("No active creature selected!");
    }
        
    }
    
    
    /**
     * This method populated the combobox with the creatures from the inventory.
     * 
     * @param inventory The inventory containing the user's creatures.
     */
    
    private void populateActiveCreatureBox (Inventory inventory){
    // Clear existing items in the combo box
    changeActiveCreatureBox.removeAllItems();

    // Retrieve the creatures from the inventory
    var creatures = inventory.getAllCreatures();

    // Add each creature name to the combo box
    for (Creature creature : creatures) {
        changeActiveCreatureBox.addItem(creature.getName());
    }
    }

    /**
     * 
     * The button which executed, will change the active creature the user has currently.
     * 
     * @param evt The action's event handler performed on the combobox.
     */
    
    private void changeActiveCreatureBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActiveCreatureBoxActionPerformed
    // Get the selected item from the combo box
    String selectedCreatureName = (String) changeActiveCreatureBox.getSelectedItem();
    
    // Retrieve the corresponding Creature object from your inventory
    Creature selectedCreature = getCreatureByName(activeInventory, selectedCreatureName);

    // Set the selected Creature as the active creature in your game
    activeInventory.setActiveCreature(selectedCreature);
    
    // Refreshes the CreatureTextBox
    populateCreatureTextBox(activeInventory);
        
    // Refreshes the Inventory Image
    refreshActiveCreatureImage(activeInventory);
    
    }//GEN-LAST:event_changeActiveCreatureBoxActionPerformed

    /**
     * This method "hides" the inventoryPanel for later use again. 
     */
    
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void changeActiveCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActiveCreatureActionPerformed
        changeActiveCreatureBoxActionPerformed(evt);
    }//GEN-LAST:event_changeActiveCreatureActionPerformed
	
}
