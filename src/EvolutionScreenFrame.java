import javax.swing.*;
import java.awt.*;

/**
 * Frame representing the evolution screen in the Budget Pokemon Game.
 * Allows the user to view available creatures and initiate the evolution process.
 * 
 * Model-View-Controller (MVC) pattern: VIEW
 * 
 * @author Shinoruba
 * @author JSTP8330
 * @version 1
 */

public class EvolutionScreenFrame extends javax.swing.JFrame {

    private Creature selectedCreature1;
    private Creature selectedCreature2;
    private Inventory activeInventory;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel creatureImage1;
    private javax.swing.JLabel creatureImage2;
    private javax.swing.JLabel creatureLabel1;
    private javax.swing.JLabel creatureLabel2;
    private javax.swing.JTextArea creatureTextBox1;
    private javax.swing.JTextArea creatureTextBox2;
    private javax.swing.JButton evolveButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox<String> selectCreature1Box;
    private javax.swing.JComboBox<String> selectCreature2Box;
    private javax.swing.JScrollPane textBoxScrollPane1;
    private javax.swing.JScrollPane textBoxScrollPane2;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form EvolutionScreenFrame
     * @param inventory The inventory containing the user's creatures.
     */
    public EvolutionScreenFrame(Inventory inventory) {
        initComponents();
        activeInventory = inventory;
        setTitle("Evolution Panels");
        setSize(640, 340);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        populateSelectCreatureBoxes(activeInventory);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        creatureLabel1 = new javax.swing.JLabel();
        creatureLabel2 = new javax.swing.JLabel();
        creatureImage1 = new javax.swing.JLabel();
        creatureImage2 = new javax.swing.JLabel();
        selectCreature1Box = new javax.swing.JComboBox<>();
        selectCreature2Box = new javax.swing.JComboBox<>();
        evolveButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        textBoxScrollPane1 = new javax.swing.JScrollPane();
        creatureTextBox1 = new javax.swing.JTextArea();
        textBoxScrollPane2 = new javax.swing.JScrollPane();
        creatureTextBox2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        creatureLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        creatureLabel1.setText("Creature 1");

        creatureLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        creatureLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        creatureLabel2.setText("Creature 2");

        creatureImage1.setText("Image 1");

        creatureImage2.setText("Image 2");

        selectCreature1Box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectCreature1Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCreature1BoxActionPerformed(evt);
            }
        });

        selectCreature2Box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectCreature2Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCreature2BoxActionPerformed(evt);
            }
        });

        evolveButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        evolveButton.setText("Evolve");
        evolveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evolveButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        creatureTextBox1.setColumns(20);
        creatureTextBox1.setRows(5);
        textBoxScrollPane1.setViewportView(creatureTextBox1);

        creatureTextBox2.setColumns(20);
        creatureTextBox2.setRows(5);
        textBoxScrollPane2.setViewportView(creatureTextBox2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectCreature1Box, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creatureLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(creatureImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textBoxScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(evolveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(creatureLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textBoxScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(creatureImage2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(selectCreature2Box, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creatureLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(creatureLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creatureImage1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textBoxScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(textBoxScrollPane2)
                            .addComponent(creatureImage2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(evolveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectCreature1Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectCreature2Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitButton))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** 
     * This method finds the creature by its name by looping all
     * the array elements of creatures in the inventory.
     *
     * @param inventory The inventory containing the user's creatures.
     * @param creatureName The name of the creature to be found.
     *
     */

    private Creature getCreatureByName(Inventory inventory, String creatureName) {
        for (Creature creature : inventory.getAllCreatures()) {
            if (creature.getName().equals(creatureName)) {
                return creature;
            }
        }
        // Return null or handle the case when the creature is not found
        return null;
    }

    /**
     *
     * This method is called when the user selects a creature from the combobox.
     *
     * @param comboBox The combobox containing the creatures.
     * @param inventory The inventory containing the user's creatures.
     * @return getCreatureByName(inventory, selectedCreatureName) The creature selected by the user.
     */

    private Creature getSelectedCreature(JComboBox<String> comboBox, Inventory inventory) {
        // Get the selected item from the combo box
        String selectedCreatureName = (String) comboBox.getSelectedItem();

        // Retrieve the corresponding Creature object from the inventory
        return getCreatureByName(inventory, selectedCreatureName);
    }
    
    /**
     * This method populates both of the comboboxes with the creatures from the inventory.
     * 
     * @param inventory The inventory containing the user's creatures.
     */
    
    private void populateSelectCreatureBoxes (Inventory inventory){
        // Clear existing items in both creature boxes
        selectCreature1Box.removeAllItems();
        selectCreature2Box.removeAllItems();

        // Retrieve the creatures from the inventory
        var creatures = inventory.getAllCreatures();

        // Add each creature name to the combo box
        for (Creature creature : creatures) {
            selectCreature1Box.addItem(creature.getName());
            selectCreature2Box.addItem(creature.getName());
        }

        // Designates the selectedCreature from the combo box
        if (selectedCreature1 == null) {
            selectedCreature1 = creatures.get(0);
        }
        if (selectedCreature2 == null) {
            selectedCreature2 = creatures.get(0);
        }
    }

    /**
     * This method populates the text area with the information of the creature.
     *
     * @param creature The creature whose information is to be displayed.
     * @param textArea The text area to be populated with the creature information.
     */

    private void populateCreatureInfo(Creature creature, JTextArea textArea) {
        // Check if the creature is not null
        if (creature != null) {
            // Get information using getters
            String name = creature.getName();
            String type = creature.getType();
            String family = creature.getFamily();
            int evolutionLevel = creature.getEvolutionLevel();
            int health = creature.getHealth();

            // Populate the text area with creature information
            textArea.setText(
                            "Name: " + name +
                            "\nType: " + type +
                            "\nFamily: " + family +
                            "\nEvolution Level: " + evolutionLevel +
                            "\nHealth: " + health
            );
        } else {
            // If no creature is selected, display a message in the text area
            textArea.setText("No creature selected!");
        }
    }

    /**
     * This method refreshes the images of two selected creatures used after an evolution.
     *
     * @param selectedCreature The first selected creature.
     * @param label The JLabel for the first creature's image.
     */
    private void refreshSelectedCreatureImage(Creature selectedCreature, JLabel label) {
        // Check if the first selected creature is not null
        if (selectedCreature != null) {
            // Get the creature name and create the corresponding icon file name
            String creatureName = selectedCreature.getName();
            // Load the icon using ClassLoader
            ImageIcon icon1 = createImageIcon("/icons/" + creatureName.toLowerCase() + ".png");
            // Set the loaded icon to the JLabel
            label.setIcon(icon1);
        } else {
            // If the first selected creature is null, set the JLabel to null or a default image
            label.setIcon(null);
        }
    }

    private ImageIcon createImageIcon(String path) {
        // Use ClassLoader to load the icon from the classpath
        java.net.URL imgUrl = getClass().getResource(path);

        // Check if the resource was found
        if (imgUrl != null) {
            return new ImageIcon(imgUrl);
        } else {
            // If the resource was not found, you can provide a default icon or handle the situation accordingly
            System.err.println("Resource not found: " + path);
            return null;
        }
    }

    private void selectCreature1BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCreature1BoxActionPerformed
        Creature selectedCreature = getSelectedCreature(selectCreature1Box, activeInventory);
        populateCreatureInfo(selectedCreature, creatureTextBox1);
        refreshSelectedCreatureImage(selectedCreature, creatureImage1);
    }//GEN-LAST:event_selectCreature1BoxActionPerformed

    private void selectCreature2BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCreature2BoxActionPerformed
        Creature selectedCreature = getSelectedCreature(selectCreature2Box, activeInventory);
        populateCreatureInfo(selectedCreature, creatureTextBox2);
        refreshSelectedCreatureImage(selectedCreature, creatureImage2);
    }//GEN-LAST:event_selectCreature2BoxActionPerformed

    private void evolveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evolveButtonActionPerformed
        // Get the selected indices from the combo boxes
        int indexCreature1 = selectCreature1Box.getSelectedIndex();
        int indexCreature2 = selectCreature2Box.getSelectedIndex();

        // Check if the selected indices are valid and different
        if (indexCreature1 != -1 && indexCreature2 != -1 && indexCreature1 != indexCreature2) {
            // Perform evolution if eligible
            if (activeInventory.evolveCreatures(indexCreature1, indexCreature2)) {
                // Evolution successful
                JOptionPane.showMessageDialog(this, "Evolution successful!");

                // Refresh the comboboxes
                populateSelectCreatureBoxes(activeInventory);

                // Refresh the information in the JTextAreas
                populateCreatureInfo((Creature) selectCreature1Box.getSelectedItem(), creatureTextBox1);
                populateCreatureInfo((Creature) selectCreature2Box.getSelectedItem(), creatureTextBox2);

                // Refresh the images
                refreshSelectedCreatureImage((Creature) selectCreature1Box.getSelectedItem(), creatureImage1);
                refreshSelectedCreatureImage((Creature) selectCreature2Box.getSelectedItem(), creatureImage2);

            } else {
                // Evolution not eligible
                JOptionPane.showMessageDialog(this, "Evolution not eligible. Check conditions.");
            }
        } else {
            // Invalid selection (either index is invalid or the same index selected for both)
            JOptionPane.showMessageDialog(this, "Invalid selection. Please select different creatures.");
        }
    }//GEN-LAST:event_evolveButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed
	
}
